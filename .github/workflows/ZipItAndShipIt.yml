name: Zip and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  zip_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create builds folder
        run: mkdir -p builds

      - name: Read version from blender_manifest.toml
        id: read_version
        run: |
          version=$(grep '^version' blender_manifest.toml | sed -E 's/version *= *"(.*)"/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Prepare release variables
        id: vars
        run: |
          repo_name=$(basename "$GITHUB_REPOSITORY")
          version="${{ steps.read_version.outputs.version }}"
          release_name="${repo_name}_${version}"
          echo "release_name=$release_name" >> "$GITHUB_OUTPUT"
          echo "tag_name=$version" >> "$GITHUB_OUTPUT"
          echo "zip_path=builds/$release_name.zip" >> "$GITHUB_OUTPUT"

      - name: Zip entire project excluding .git, .github/workflows, builds, and __pycache__
        run: |
          zip_path="${{ steps.vars.outputs.zip_path }}"
          zip -r "$zip_path" . \
            -x ".git/*" \
            -x ".github/workflows/*" \
            -x "builds/*" \
            -x "**/__pycache__/*"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          release_name: ${{ steps.vars.outputs.release_name }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.zip_path }}
          asset_name: ${{ steps.vars.outputs.release_name }}.zip
          asset_content_type: application/zip
