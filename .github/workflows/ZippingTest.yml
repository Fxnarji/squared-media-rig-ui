name: Zip and Release project with version from TOML

on:
  workflow_dispatch:
      inputs:
        name_prefix:
          description: 'Override name prefix'
          required: false

permissions:
  contents: write

jobs:
  zip_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create builds folder
        run: mkdir -p builds

      - name: Read version and name from blender_manifest.toml
        id: read_toml
        run: |
          version=$(grep '^version' blender_manifest.toml | sed -E 's/version *= *"(.*)"/\1/')
          name=(grep '^name' blender_manifest.toml | sed -E 's/name *= *"(.*)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Prepare release variables
        id: vars
        run: |
          repo_name=$(basename $GITHUB_REPOSITORY)
          release_name="${repo_name}_${{ steps.read_toml.outputs.version }}"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "tag_name=${{ steps.read_toml.outputs.version }}" >> $GITHUB_OUTPUT

      - name: combine Zip Name
        id: combine_vars
        run: |
          prefix="${{ github.event.inputs.name_prefix || steps.read_toml.outputs.name }}"
          version="${{ steps.read_toml.outputs.version }}"
          zip_name="$prefix $version.zip"
          release_name="${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY)_$version"
          echo "zip_name=$zip_name" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "tag_name=$version" >> $GITHUB_OUTPUT

      - name: Zip entire project excluding .git, .github/workflows, builds, and __pycache__
        run: |
          zip -r builds/${{ steps.combine_vars.outputs.zip_name }}.zip . \
            -x ".git/*" \
            -x ".github/workflows/*" \
            -x "builds/*" \
            -x "**/__pycache__/*"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          release_name: ${{ steps.vars.outputs.release_name }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: builds/test.zip
          asset_name: test.zip
          asset_content_type: application/zip
