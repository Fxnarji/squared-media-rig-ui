name: Manual Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release tag
        id: get_tag
        run: |
          latest_tag=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name || echo "0.0.0")
          echo "Latest tag: $latest_tag"
      
          IFS='.' read -r major minor patch <<< "$latest_tag"
          patch=$((patch + 1))
          new_tag="$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create builds directory
        run: mkdir -p builds

      - name: Create version.json
        run: |
          echo "{\"version\": \"${{ steps.get_tag.outputs.new_tag }}\"}" > version.json

      - name: Create zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}+${{ steps.get_tag.outputs.new_tag }}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/workflows/*" \
            -x "builds/*" \
            -x "**/__pycache__/*"

      - name: Commit version.json
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.json
          git commit -m "Update version to ${{ steps.get_tag.outputs.new_tag }}"
          git push

      - name: Create new GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "Release ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release" \
            "builds/$(basename `git rev-parse --show-toplevel`)+${{ steps.get_tag.outputs.new_tag }}.zip"
