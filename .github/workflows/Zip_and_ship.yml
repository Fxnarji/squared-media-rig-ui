name: Manual Release

on:
  workflow_dispatch:
    inputs:
      bump_minor:
        description: "Bump minor version"
        required: false
        default: "false"
      bump_major:
        description: "Bump major version"
        required: false
        default: "false"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release tag and calculate new version
        id: get_tag
        run: |
          # Get the list of releases (an array)
          release_tags=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name' 2>/dev/null)

          if [[ -z "$release_tags" ]]; then
            # No releases: fallback
            latest_tag="v0.0.0"
          else
            # Get the latest tag from the first release in the list (releases API returns in descending order)
            latest_tag=$(gh api repos/${{ github.repository }}/releases --jq '.[0].tag_name' 2>/dev/null)
          fi

          echo "Latest tag: $latest_tag"
          echo "bump_major: ${{ github.event.inputs.bump_major }}"
          echo "bump_minor: ${{ github.event.inputs.bump_minor }}"


          latest_tag_clean="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$latest_tag_clean"

          if [[ ${{ github.event.inputs.bump_major }} == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ ${{ github.event.inputs.bump_minor }} == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          fi

          patch=$((patch + 1))
          new_tag="$major.$minor.$patch"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_tag_with_v=v$new_tag" >> "$GITHUB_OUTPUT"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in blender_manifest.toml
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.get_tag.outputs.new_tag }}"/' blender_manifest.toml

      - name: Create builds directory
        run: mkdir -p builds

      - name: Create zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}_${{ steps.get_tag.outputs.new_tag }}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "builds/*" \
            -x "/__pycache__/*" \
            -x "**/__pycache__/*"

      - name: Commit updated blender_manifest.toml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add blender_manifest.toml
          git commit --allow-empty -m "Update version to ${{ steps.get_tag.outputs.new_tag }}"
          git push

      - name: Create new GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "$(basename `git rev-parse --show-toplevel`) ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release" \
            "builds/$(basename `git rev-parse --show-toplevel`)_${{ steps.get_tag.outputs.new_tag }}.zip"
