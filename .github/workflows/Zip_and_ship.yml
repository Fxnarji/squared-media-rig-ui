name: Manual Release

on:
  workflow_dispatch:
    inputs:
      bump_patch:
        description: "Bump patch version (default)"
        required: false
        default: "true"
      bump_minor:
        description: "Bump minor version"
        required: false
        default: "false"
      bump_major:
        description: "Bump major version"
        required: false
        default: "false"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release tag and calculate new version
        id: get_tag
        run: |
          latest_tag=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          latest_tag_clean="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$latest_tag_clean"

          # Inputs
          bump_patch="${{ github.event.inputs.bump_patch }}"
          bump_minor="${{ github.event.inputs.bump_minor }}"
          bump_major="${{ github.event.inputs.bump_major }}"

          if [[ "$bump_major" == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$bump_minor" == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_tag="$major.$minor.$patch"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_tag_with_v=v$new_tag" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in blender_manifest.toml
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.get_tag.outputs.new_tag }}"/' blender_manifest.toml

      - name: Create builds directory
        run: mkdir -p builds

      - name: Create zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}_${{ steps.get_tag.outputs.new_tag }}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/workflows/*" \
            -x "builds/*" \
            -x "**/__pycache__/*"

      - name: Commit updated blender_manifest.toml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add blender_manifest.toml
          git commit -m "Update version to ${{ steps.get_tag.outputs.new_tag }}"
          git push

      - name: Create new GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "$(basename `git rev-parse --show-toplevel`) ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release" \
            "builds/$(basename `git rev-parse --show-toplevel`)_${{ steps.get_tag.outputs.new_tag }}.zip"
